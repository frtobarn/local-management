// Funci√≥n para crear pr√©stamos de prueba
async function crearPrestamosPrueba() {
  const { db } = await import('./src/db.js');
  
  // Obtener usuarios e items existentes
  const usuarios = await db.users.toArray();
  const items = await db.items.toArray();
  
  if (usuarios.length === 0 || items.length === 0) {
    console.log('‚ùå Necesitas tener al menos un usuario y un item creados');
    return;
  }
  
  // Crear pr√©stamos de ayer
  const ayer = new Date();
  ayer.setDate(ayer.getDate() - 1);
  ayer.setHours(10, 30, 0, 0); // 10:30 AM de ayer
  
  const prestamosAyer = [
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: ayer.getTime(),
      duration: 2 * 60 * 60 * 1000, // 2 horas
      returned: false,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    },
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: ayer.getTime() + (3 * 60 * 60 * 1000), // 3 horas despu√©s
      duration: 1 * 60 * 60 * 1000, // 1 hora
      returned: true,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    }
  ];
  
  // Crear pr√©stamos de hace 2 d√≠as
  const hace2Dias = new Date();
  hace2Dias.setDate(hace2Dias.getDate() - 2);
  hace2Dias.setHours(14, 0, 0, 0); // 2:00 PM hace 2 d√≠as
  
  const prestamosHace2Dias = [
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: hace2Dias.getTime(),
      duration: 3 * 60 * 60 * 1000, // 3 horas
      returned: false,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    }
  ];
  
  // Insertar todos los pr√©stamos
  const todosLosPrestamos = [...prestamosAyer, ...prestamosHace2Dias];
  
  for (const prestamo of todosLosPrestamos) {
    await db.loans.add(prestamo);
  }
  
  console.log('‚úÖ Se crearon', todosLosPrestamos.length, 'pr√©stamos de prueba');
  console.log('üìÖ Pr√©stamos de ayer:', prestamosAyer.length);
  console.log('ÔøΩÔøΩ Pr√©stamos de hace 2 d√≠as:', prestamosHace2Dias.length);
  
  // Recargar la p√°gina para ver los cambios
  window.location.reload();
}

// Ejecutar la funci√≥n
crearPrestamosPrueba();


//============================================================================
//============================================================================
//============================================================================
//============================================================================




// Funci√≥n para crear pr√©stamos de prueba de meses anteriores
async function crearPrestamosMesesAnteriores() {
  const { db } = await import('./src/db.js');
  
  // Obtener usuarios e items existentes
  const usuarios = await db.users.toArray();
  const items = await db.items.toArray();
  
  if (usuarios.length === 0 || items.length === 0) {
    console.log('‚ùå Necesitas tener al menos un usuario y un item creados');
    return;
  }
  
  // Mes pasado (hace 1 mes)
  const mesPasado = new Date();
  mesPasado.setMonth(mesPasado.getMonth() - 1);
  mesPasado.setDate(15); // D√≠a 15 del mes pasado
  mesPasado.setHours(9, 0, 0, 0); // 9:00 AM
  
  const prestamosMesPasado = [
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: mesPasado.getTime(),
      duration: 2 * 60 * 60 * 1000, // 2 horas
      returned: true,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    },
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: mesPasado.getTime() + (24 * 60 * 60 * 1000), // 1 d√≠a despu√©s
      duration: 1 * 60 * 60 * 1000, // 1 hora
      returned: false,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    },
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: mesPasado.getTime() + (7 * 24 * 60 * 60 * 1000), // 1 semana despu√©s
      duration: 3 * 60 * 60 * 1000, // 3 horas
      returned: true,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    }
  ];
  
  // Mes antepasado (hace 2 meses)
  const mesAntepasado = new Date();
  mesAntepasado.setMonth(mesAntepasado.getMonth() - 2);
  mesAntepasado.setDate(10); // D√≠a 10 del mes antepasado
  mesAntepasado.setHours(14, 30, 0, 0); // 2:30 PM
  
  const prestamosMesAntepasado = [
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: mesAntepasado.getTime(),
      duration: 4 * 60 * 60 * 1000, // 4 horas
      returned: true,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    },
    {
      userId: usuarios[0].id,
      itemId: items[0].id,
      startTime: mesAntepasado.getTime() + (3 * 24 * 60 * 60 * 1000), // 3 d√≠as despu√©s
      duration: 2 * 60 * 60 * 1000, // 2 horas
      returned: false,
      userName: usuarios[0].name,
      itemName: items[0].name,
      itemCode: items[0].code
    }
  ];
  
  // Insertar todos los pr√©stamos
  const todosLosPrestamos = [...prestamosMesPasado, ...prestamosMesAntepasado];
  
  for (const prestamo of todosLosPrestamos) {
    await db.loans.add(prestamo);
  }
  
  console.log('‚úÖ Se crearon', todosLosPrestamos.length, 'pr√©stamos de prueba');
  console.log('üìÖ Pr√©stamos del mes pasado:', prestamosMesPasado.length);
  console.log('üìÖ Pr√©stamos del mes antepasado:', prestamosMesAntepasado.length);
  console.log('ÔøΩÔøΩ Total de pr√©stamos en BD:', await db.loans.count());
  
  // Recargar la p√°gina para ver los cambios
  window.location.reload();
}

// Ejecutar la funci√≥n
crearPrestamosMesesAnteriores();